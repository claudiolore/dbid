// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace dbid.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250301112735_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AltriImpiantiComplesso", b =>
                {
                    b.Property<Guid>("AltriImpiantiId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.HasKey("AltriImpiantiId", "ComplessoId");

                    b.HasIndex("ComplessoId");

                    b.ToTable("ComplessoAltriImpianti", (string)null);
                });

            modelBuilder.Entity("AltriImpiantiEdificio", b =>
                {
                    b.Property<Guid>("AltriImpiantiId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.HasKey("AltriImpiantiId", "EdificioId");

                    b.HasIndex("EdificioId");

                    b.ToTable("EdificioAltriImpianti", (string)null);
                });

            modelBuilder.Entity("AltriImpiantiUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("AltriImpiantiId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("AltriImpiantiId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareAltriImpianti", (string)null);
                });

            modelBuilder.Entity("ComplessoDocumentiGenerali", b =>
                {
                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DocumentiGeneraliId")
                        .HasColumnType("char(36)");

                    b.HasKey("ComplessoId", "DocumentiGeneraliId");

                    b.HasIndex("DocumentiGeneraliId");

                    b.ToTable("ComplessoDocumentiGenerali", (string)null);
                });

            modelBuilder.Entity("ComplessoIdraulicoAdduzione", b =>
                {
                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdraulicoAdduzioneId")
                        .HasColumnType("char(36)");

                    b.HasKey("ComplessoId", "IdraulicoAdduzioneId");

                    b.HasIndex("IdraulicoAdduzioneId");

                    b.ToTable("ComplessoIdraulicoAdduzione", (string)null);
                });

            modelBuilder.Entity("ComplessoImpiantiElettrici", b =>
                {
                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImpiantiElettriciId")
                        .HasColumnType("char(36)");

                    b.HasKey("ComplessoId", "ImpiantiElettriciId");

                    b.HasIndex("ImpiantiElettriciId");

                    b.ToTable("ComplessoImpiantiElettrici", (string)null);
                });

            modelBuilder.Entity("ComplessoImpiantoClimaAcs", b =>
                {
                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImpiantoClimaAcsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ComplessoId", "ImpiantoClimaAcsId");

                    b.HasIndex("ImpiantoClimaAcsId");

                    b.ToTable("ComplessoImpiantoClimaAcs", (string)null);
                });

            modelBuilder.Entity("ComplessoScarichiIdriciFognari", b =>
                {
                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScarichiIdriciFognariId")
                        .HasColumnType("char(36)");

                    b.HasKey("ComplessoId", "ScarichiIdriciFognariId");

                    b.HasIndex("ScarichiIdriciFognariId");

                    b.ToTable("ComplessoScarichiIdriciFognari", (string)null);
                });

            modelBuilder.Entity("ComplessoStrutture", b =>
                {
                    b.Property<Guid>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StruttureId")
                        .HasColumnType("char(36)");

                    b.HasKey("ComplessoId", "StruttureId");

                    b.HasIndex("StruttureId");

                    b.ToTable("ComplessoStrutture", (string)null);
                });

            modelBuilder.Entity("DocumentiGeneraliEdificio", b =>
                {
                    b.Property<Guid>("DocumentiGeneraliId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.HasKey("DocumentiGeneraliId", "EdificioId");

                    b.HasIndex("EdificioId");

                    b.ToTable("EdificioDocumentiGenerali", (string)null);
                });

            modelBuilder.Entity("DocumentiGeneraliUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("DocumentiGeneraliId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("DocumentiGeneraliId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareDocumentiGenerali", (string)null);
                });

            modelBuilder.Entity("EdificioIdraulicoAdduzione", b =>
                {
                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IdraulicoAdduzioneId")
                        .HasColumnType("char(36)");

                    b.HasKey("EdificioId", "IdraulicoAdduzioneId");

                    b.HasIndex("IdraulicoAdduzioneId");

                    b.ToTable("EdificioIdraulicoAdduzione", (string)null);
                });

            modelBuilder.Entity("EdificioImpiantiElettrici", b =>
                {
                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImpiantiElettriciId")
                        .HasColumnType("char(36)");

                    b.HasKey("EdificioId", "ImpiantiElettriciId");

                    b.HasIndex("ImpiantiElettriciId");

                    b.ToTable("EdificioImpiantiElettrici", (string)null);
                });

            modelBuilder.Entity("EdificioImpiantoClimaAcs", b =>
                {
                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImpiantoClimaAcsId")
                        .HasColumnType("char(36)");

                    b.HasKey("EdificioId", "ImpiantoClimaAcsId");

                    b.HasIndex("ImpiantoClimaAcsId");

                    b.ToTable("EdificioImpiantoClimaAcs", (string)null);
                });

            modelBuilder.Entity("EdificioInfissi", b =>
                {
                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InfissiId")
                        .HasColumnType("char(36)");

                    b.HasKey("EdificioId", "InfissiId");

                    b.HasIndex("InfissiId");

                    b.ToTable("EdificioInfissi", (string)null);
                });

            modelBuilder.Entity("EdificioScarichiIdriciFognari", b =>
                {
                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ScarichiIdriciFognariId")
                        .HasColumnType("char(36)");

                    b.HasKey("EdificioId", "ScarichiIdriciFognariId");

                    b.HasIndex("ScarichiIdriciFognariId");

                    b.ToTable("EdificioScarichiIdriciFognari", (string)null);
                });

            modelBuilder.Entity("EdificioStrutture", b =>
                {
                    b.Property<Guid>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StruttureId")
                        .HasColumnType("char(36)");

                    b.HasKey("EdificioId", "StruttureId");

                    b.HasIndex("StruttureId");

                    b.ToTable("EdificioStrutture", (string)null);
                });

            modelBuilder.Entity("IdraulicoAdduzioneUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("IdraulicoAdduzioneId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("IdraulicoAdduzioneId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareIdraulicoAdduzione", (string)null);
                });

            modelBuilder.Entity("ImpiantiElettriciUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("ImpiantiElettriciId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImpiantiElettriciId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareImpiantiElettrici", (string)null);
                });

            modelBuilder.Entity("ImpiantoClimaAcsUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("ImpiantoClimaAcsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImpiantoClimaAcsId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareImpiantoClimaAcs", (string)null);
                });

            modelBuilder.Entity("InfissiUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("InfissiId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("InfissiId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareInfissi", (string)null);
                });

            modelBuilder.Entity("Models.AltriImpianti", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneConformita")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneRispondenza")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoImpianto")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AltriImpianti");
                });

            modelBuilder.Entity("Models.Complesso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AerofotografiaCartografiaStorica")
                        .HasColumnType("longtext");

                    b.Property<bool?>("AgibilitaRilieviArchitettoniciAnas")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AgibilitaRilieviArchitettoniciRilevato")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AltriImpiantiIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("CapAnas")
                        .HasColumnType("int");

                    b.Property<int?>("CapRilevato")
                        .HasColumnType("int");

                    b.Property<string>("CategorieUsoNTC2018")
                        .HasColumnType("longtext");

                    b.Property<string>("CausaInagibilitaRilieviArchitettoniciAnas")
                        .HasColumnType("longtext");

                    b.Property<string>("CausaInagibilitaRilieviArchitettoniciRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("ComuneAnas")
                        .HasColumnType("longtext");

                    b.Property<string>("ComuneRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("CoordinateGeografiche")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DataRilievo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DestinazioneUso")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneInteresseCulturaleArtistico")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentiGeneraliIds")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentoValutazioneRischi")
                        .HasColumnType("longtext");

                    b.Property<string>("EdificiIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ElaboratoPlanimetrico")
                        .HasColumnType("longtext");

                    b.Property<string>("EstrattoDiMappaCatastale")
                        .HasColumnType("longtext");

                    b.Property<string>("FotoGenerali")
                        .HasColumnType("longtext");

                    b.Property<string>("IdraulicoAdduzioneIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ImpiantiElettriciIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ImpiantoClimaAcsIds")
                        .HasColumnType("longtext");

                    b.Property<string>("IndirizziRilevati")
                        .HasColumnType("longtext");

                    b.Property<string>("IstanzaAccertamentoSussistenza")
                        .HasColumnType("longtext");

                    b.Property<string>("LocalitaAnas")
                        .HasColumnType("longtext");

                    b.Property<string>("LocalitaRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("Lotto")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int?>("NumeroCivicoAnas")
                        .HasColumnType("int");

                    b.Property<string>("Operatore")
                        .HasColumnType("longtext");

                    b.Property<string>("PianiUrbanistici")
                        .HasColumnType("longtext");

                    b.Property<int?>("Priorita")
                        .HasColumnType("int");

                    b.Property<string>("ProgettoUltimoInterventoEffettuato")
                        .HasColumnType("longtext");

                    b.Property<string>("ProgressivaChilometrica")
                        .HasColumnType("longtext");

                    b.Property<string>("ProvinciaAnas")
                        .HasColumnType("longtext");

                    b.Property<string>("ProvinciaRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("RegioneAnas")
                        .HasColumnType("longtext");

                    b.Property<string>("RegioneRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("RelazioneGeotecnicaDelSito")
                        .HasColumnType("longtext");

                    b.Property<string>("ScarichiIdriciFognariIds")
                        .HasColumnType("longtext");

                    b.Property<string>("SegnalazioneCertificataAgibilita")
                        .HasColumnType("longtext");

                    b.Property<string>("StradaAnas")
                        .HasColumnType("longtext");

                    b.Property<string>("StruttureComplesso")
                        .HasColumnType("longtext");

                    b.Property<string>("StruttureIds")
                        .HasColumnType("longtext");

                    b.Property<string>("Tipologia")
                        .HasColumnType("longtext");

                    b.Property<string>("TitoloProprieta")
                        .HasColumnType("longtext");

                    b.Property<string>("ViaAnas")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Complessi");
                });

            modelBuilder.Entity("Models.DocumentiGenerali", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("longtext");

                    b.Property<string>("Documenti")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DocumentiGenerali");
                });

            modelBuilder.Entity("Models.Edificio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool?>("AgibilitaRilieviArchitettoniciRilevato")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AltriImpiantiIds")
                        .HasColumnType("longtext");

                    b.Property<string>("CausaInagibilitaRilieviArchitettoniciRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("CollaudoStatico")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ComplessoId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("CorpiScala")
                        .HasColumnType("int");

                    b.Property<string>("DestinazioneUsoPrevalenteRilevata")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentiGeneraliIds")
                        .HasColumnType("longtext");

                    b.Property<string>("Foglio")
                        .HasColumnType("longtext");

                    b.Property<string>("IdraulicoAdduzioneIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ImpiantiElettriciIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ImpiantoClimaAcsIds")
                        .HasColumnType("longtext");

                    b.Property<string>("InfissiIds")
                        .HasColumnType("longtext");

                    b.Property<int?>("LivelliFuoriTerra")
                        .HasColumnType("int");

                    b.Property<int?>("LivelliInterrati")
                        .HasColumnType("int");

                    b.Property<int?>("LivelliSeminterrati")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Particella")
                        .HasColumnType("longtext");

                    b.Property<string>("PianoManutenzioneOpera")
                        .HasColumnType("longtext");

                    b.Property<string>("Planimetria")
                        .HasColumnType("longtext");

                    b.Property<string>("PosizioneRispettoAiFabbricatiCircostanti")
                        .HasColumnType("longtext");

                    b.Property<string>("ProgettoStrutturale")
                        .HasColumnType("longtext");

                    b.Property<string>("Prospetto")
                        .HasColumnType("longtext");

                    b.Property<string>("RapportoVerificaFunzionamentoAscensori")
                        .HasColumnType("longtext");

                    b.Property<string>("RicevutePagamentoTributi")
                        .HasColumnType("longtext");

                    b.Property<string>("ScarichiIdriciFognariIds")
                        .HasColumnType("longtext");

                    b.Property<string>("SegnalazioneCertificataAgibilita")
                        .HasColumnType("longtext");

                    b.Property<string>("Sezione")
                        .HasColumnType("longtext");

                    b.Property<string>("Sezione_Doc")
                        .HasColumnType("longtext");

                    b.Property<string>("StruttureIds")
                        .HasColumnType("longtext");

                    b.Property<string>("StruttureImmobile")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoCatasto")
                        .HasColumnType("longtext");

                    b.Property<string>("TipologiaEdilizia")
                        .HasColumnType("longtext");

                    b.Property<string>("TipologiaStrutturale")
                        .HasColumnType("longtext");

                    b.Property<string>("TitoloEdilizio")
                        .HasColumnType("longtext");

                    b.Property<string>("UltimoInterventoFabbricato")
                        .HasColumnType("longtext");

                    b.Property<string>("UnitaImmobiliariIds")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ComplessoId");

                    b.ToTable("Edifici");
                });

            modelBuilder.Entity("Models.IdraulicoAdduzione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("Contatore")
                        .HasColumnType("longtext");

                    b.Property<string>("ContrattoFornitura")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneConformita")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneRispondenza")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoImpianto")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IdraulicoAdduzione");
                });

            modelBuilder.Entity("Models.ImpiantiElettrici", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("Contatore")
                        .HasColumnType("longtext");

                    b.Property<string>("ContrattoFornitura")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneConformita")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneRispondenza")
                        .HasColumnType("longtext");

                    b.Property<string>("DistribuzioneElettrica")
                        .HasColumnType("longtext");

                    b.Property<string>("FotoContatore")
                        .HasColumnType("longtext");

                    b.Property<string>("FotoGenerale")
                        .HasColumnType("longtext");

                    b.Property<string>("LocaliServiti")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ImpiantiElettrici");
                });

            modelBuilder.Entity("Models.ImpiantoClimaAcs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneConformita")
                        .HasColumnType("longtext");

                    b.Property<string>("DichiarazioneRispondenza")
                        .HasColumnType("longtext");

                    b.Property<string>("Emissione")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<string>("Generatore")
                        .HasColumnType("longtext");

                    b.Property<string>("LocaliServiti")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoImpianto")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ImpiantoClimaAcs");
                });

            modelBuilder.Entity("Models.Infissi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("Altezza")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Inferriate")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("Larghezza")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("MaterialeTelaio")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroAnte")
                        .HasColumnType("longtext");

                    b.Property<string>("SistemaOscuramento")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("SpessoreTelaio")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.Property<string>("TaglioTermico")
                        .HasColumnType("longtext");

                    b.Property<string>("Vetro")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Infissi");
                });

            modelBuilder.Entity("Models.ScarichiIdriciFognari", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AllaccioInFogna")
                        .HasColumnType("longtext");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoImpianto")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ScarichiIdriciFognari");
                });

            modelBuilder.Entity("Models.SegnalazioneProblema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Descrizione")
                        .HasColumnType("longtext");

                    b.Property<string>("Foto")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StruttureId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StruttureId");

                    b.ToTable("SegnalazioneProblema");
                });

            modelBuilder.Entity("Models.Strutture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Codice")
                        .HasColumnType("longtext");

                    b.Property<string>("FinituraEsterna")
                        .HasColumnType("longtext");

                    b.Property<string>("FinituraInterna")
                        .HasColumnType("longtext");

                    b.Property<string>("Posizione")
                        .HasColumnType("longtext");

                    b.Property<string>("SegnalazioneProblemaIds")
                        .HasColumnType("longtext");

                    b.Property<string>("SottotipologiaStruttura")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("SpessoreLordo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("StatoConservativo")
                        .HasColumnType("longtext");

                    b.Property<string>("TipologiaStruttura")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Strutture");
                });

            modelBuilder.Entity("Models.UnitaImmobiliare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool?>("AgibilitaRilieviArchitettoniciRilevato")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AltriImpiantiIds")
                        .HasColumnType("longtext");

                    b.Property<string>("AttestazionePrestazioneEnergetica")
                        .HasColumnType("longtext");

                    b.Property<string>("CategoriaAttivita")
                        .HasColumnType("longtext");

                    b.Property<string>("CategoriaCatastale")
                        .HasColumnType("longtext");

                    b.Property<string>("CausaInagibilitaRilieviArchitettoniciRilevato")
                        .HasColumnType("longtext");

                    b.Property<string>("CertificatoDestinazioneUrbanistica")
                        .HasColumnType("longtext");

                    b.Property<string>("ContrattoUso")
                        .HasColumnType("longtext");

                    b.Property<string>("DestinazioneUsoRilevata")
                        .HasColumnType("longtext");

                    b.Property<string>("DisegnoSchemaInfissi")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentiGeneraliIds")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EdificioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("IdraulicoAdduzioneIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ImpiantiElettriciIds")
                        .HasColumnType("longtext");

                    b.Property<string>("ImpiantoClimaAcsIds")
                        .HasColumnType("longtext");

                    b.Property<string>("InfissiIds")
                        .HasColumnType("longtext");

                    b.Property<string>("Interno")
                        .HasColumnType("longtext");

                    b.Property<string>("NomeConduttoreEffettivo")
                        .HasColumnType("longtext");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<string>("Piano")
                        .HasColumnType("longtext");

                    b.Property<string>("PlanimetriaCatastale")
                        .HasColumnType("longtext");

                    b.Property<string>("RicevutePagamentoTributi")
                        .HasColumnType("longtext");

                    b.Property<string>("RilievoArchitettonico")
                        .HasColumnType("longtext");

                    b.Property<string>("Scala")
                        .HasColumnType("longtext");

                    b.Property<string>("ScarichiIdriciFognariIds")
                        .HasColumnType("longtext");

                    b.Property<string>("SegnalazioneCertificataAgibilita")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoOccupazioneImmobile")
                        .HasColumnType("longtext");

                    b.Property<string>("StatoOccupazioneImmobileDescrizione")
                        .HasColumnType("longtext");

                    b.Property<string>("Subalterno")
                        .HasColumnType("longtext");

                    b.Property<string>("TipoUso")
                        .HasColumnType("longtext");

                    b.Property<string>("TitoloEdilizio")
                        .HasColumnType("longtext");

                    b.Property<string>("VisuraCatastaleStorica")
                        .HasColumnType("longtext");

                    b.Property<string>("VisuraIpotecaria")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EdificioId");

                    b.ToTable("UnitaImmobiliari");
                });

            modelBuilder.Entity("ScarichiIdriciFognariUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("ScarichiIdriciFognariId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("ScarichiIdriciFognariId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareScarichiIdriciFognari", (string)null);
                });

            modelBuilder.Entity("StruttureUnitaImmobiliare", b =>
                {
                    b.Property<Guid>("StruttureId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UnitaImmobiliareId")
                        .HasColumnType("char(36)");

                    b.HasKey("StruttureId", "UnitaImmobiliareId");

                    b.HasIndex("UnitaImmobiliareId");

                    b.ToTable("UnitaImmobiliareStrutture", (string)null);
                });

            modelBuilder.Entity("AltriImpiantiComplesso", b =>
                {
                    b.HasOne("Models.AltriImpianti", null)
                        .WithMany()
                        .HasForeignKey("AltriImpiantiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AltriImpiantiEdificio", b =>
                {
                    b.HasOne("Models.AltriImpianti", null)
                        .WithMany()
                        .HasForeignKey("AltriImpiantiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AltriImpiantiUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.AltriImpianti", null)
                        .WithMany()
                        .HasForeignKey("AltriImpiantiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplessoDocumentiGenerali", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.DocumentiGenerali", null)
                        .WithMany()
                        .HasForeignKey("DocumentiGeneraliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplessoIdraulicoAdduzione", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.IdraulicoAdduzione", null)
                        .WithMany()
                        .HasForeignKey("IdraulicoAdduzioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplessoImpiantiElettrici", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ImpiantiElettrici", null)
                        .WithMany()
                        .HasForeignKey("ImpiantiElettriciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplessoImpiantoClimaAcs", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ImpiantoClimaAcs", null)
                        .WithMany()
                        .HasForeignKey("ImpiantoClimaAcsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplessoScarichiIdriciFognari", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ScarichiIdriciFognari", null)
                        .WithMany()
                        .HasForeignKey("ScarichiIdriciFognariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplessoStrutture", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Strutture", null)
                        .WithMany()
                        .HasForeignKey("StruttureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentiGeneraliEdificio", b =>
                {
                    b.HasOne("Models.DocumentiGenerali", null)
                        .WithMany()
                        .HasForeignKey("DocumentiGeneraliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentiGeneraliUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.DocumentiGenerali", null)
                        .WithMany()
                        .HasForeignKey("DocumentiGeneraliId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdificioIdraulicoAdduzione", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.IdraulicoAdduzione", null)
                        .WithMany()
                        .HasForeignKey("IdraulicoAdduzioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdificioImpiantiElettrici", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ImpiantiElettrici", null)
                        .WithMany()
                        .HasForeignKey("ImpiantiElettriciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdificioImpiantoClimaAcs", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ImpiantoClimaAcs", null)
                        .WithMany()
                        .HasForeignKey("ImpiantoClimaAcsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdificioInfissi", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Infissi", null)
                        .WithMany()
                        .HasForeignKey("InfissiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdificioScarichiIdriciFognari", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ScarichiIdriciFognari", null)
                        .WithMany()
                        .HasForeignKey("ScarichiIdriciFognariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdificioStrutture", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Strutture", null)
                        .WithMany()
                        .HasForeignKey("StruttureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdraulicoAdduzioneUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.IdraulicoAdduzione", null)
                        .WithMany()
                        .HasForeignKey("IdraulicoAdduzioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImpiantiElettriciUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.ImpiantiElettrici", null)
                        .WithMany()
                        .HasForeignKey("ImpiantiElettriciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImpiantoClimaAcsUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.ImpiantoClimaAcs", null)
                        .WithMany()
                        .HasForeignKey("ImpiantoClimaAcsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InfissiUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.Infissi", null)
                        .WithMany()
                        .HasForeignKey("InfissiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Edificio", b =>
                {
                    b.HasOne("Models.Complesso", null)
                        .WithMany()
                        .HasForeignKey("ComplessoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.SegnalazioneProblema", b =>
                {
                    b.HasOne("Models.Strutture", null)
                        .WithMany()
                        .HasForeignKey("StruttureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.UnitaImmobiliare", b =>
                {
                    b.HasOne("Models.Edificio", null)
                        .WithMany()
                        .HasForeignKey("EdificioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ScarichiIdriciFognariUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.ScarichiIdriciFognari", null)
                        .WithMany()
                        .HasForeignKey("ScarichiIdriciFognariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StruttureUnitaImmobiliare", b =>
                {
                    b.HasOne("Models.Strutture", null)
                        .WithMany()
                        .HasForeignKey("StruttureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.UnitaImmobiliare", null)
                        .WithMany()
                        .HasForeignKey("UnitaImmobiliareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
